import 'dart:convert';

void main() {
  // Declaração de variáveis
  String nome = "Laranja";
  double peso = 100.2;
  String cor = "Verde e Amarela";
  String sabor = "Doce e cítrica";
  int diasDesdeColheita = 40;
  bool? isMadura;

  // Determina se a fruta está madura com base nos dias desde a colheita
  if (diasDesdeColheita >= 30) {
    isMadura = true;
  } else {
    isMadura = false;
  }

  // Cria uma instância da classe Fruta
  Fruta melancia = Fruta('Melancia', 1500.0, 'Verde', 'Doce', 40); 
  melancia.estaMadura(43);

  // Cria instâncias das classes Legume, Fruta, Nozes e Citricas
  Legume legume1 = Legume("Macaxeira", 1200, "Marrom", true);
  Fruta banana1 = Fruta('Banana', 75, 'Amarela', 'Doce', 20);
  Nozes noz1 = Nozes('Amendoim', 3.5, "Marrom", "Salgado", 16, 130);
  Citricas citrica1 = Citricas("Limão", 100, "Verde", "Ácido", 10, 5.0);

  // Chama métodos para imprimir informações sobre os alimentos
  legume1.printAlimento();
  banana1.printAlimento();
  noz1.printAlimento();
  citrica1.printAlimento();

  // Chama métodos específicos das instâncias
  legume1.cozinhar(); 
  banana1.fazerSuco(); 
}

// Função para verificar se a fruta está madura
bool funcEstaMadura(int dias) {
  return dias >= 30;
}

// Função para mostrar se a fruta está madura e sua cor
void mostrarMadura(String nome, int dias, {required String cor}) {
  if (dias >= 30) {
    print("A $nome está madura.");
  } else {
    print("A $nome não está madura.");
  }
  print("A $nome é $cor.");
}

// Função para calcular quantos dias faltam para a fruta amadurecer
int funcQuantosDiasMadura(int dias) {
  int diasParaMadura = 30;
  return diasParaMadura - dias;
}

// Classe base para alimentos
class Alimento {
  String nome;
  double peso;
  String cor;

  Alimento(this.nome, this.peso, this.cor);

  // Método para imprimir informações sobre o alimento
  void printAlimento() {
    print("Este/a $nome pesa $peso gramas e é $cor.");
  }
}

// Classe Fruta que herda de Alimento
class Fruta extends Alimento {
  String sabor;
  int diasDesdeColheita;
  bool? isMadura;

  Fruta(
      String nome, double peso, String cor, this.sabor, this.diasDesdeColheita,
      {this.isMadura})
      : super(nome, peso, cor);

  // Método para verificar se a fruta está madura
  void estaMadura(int diasParaMadura) {
    isMadura = diasDesdeColheita >= diasParaMadura;
    print('A sua $nome foi colhida a $diasDesdeColheita dias e precisa de'
        ' $diasParaMadura dias para poder comer!'
        'Ela está Madura? $isMadura');
  }

  // Método para fazer suco da fruta
  void fazerSuco() {
    print("Você fez um ótimo suco de $nome");
  }
}

// Classe Legume que herda de Alimento e implementa a interface Bolo
class Legume extends Alimento implements Bolo {
  bool isPrecisaCozinhar;

  Legume(String nome, double peso, String cor, this.isPrecisaCozinhar)
      : super(nome, peso, cor);

  // Método para cozinhar o legume
  void cozinhar() {
    (isPrecisaCozinhar)
        ? print("Pronto, o $nome está cozinhado!")
        : print("Nem precisou cozinhar");
  }

  @override
  void separarIngredientes() {
    print('Pegar a $nome');
  }

  @override
  void FazerMassa() {
    print('Misturar a fruta com Farinha, açucar e ovos...');
  }

  @override
  void assar() {
    print('Colocar no forno');
  }
}

// Classe Citricas que herda de Fruta
class Citricas extends Fruta {
  double nivelAzedo;

  Citricas(String nome, double peso, String cor, String sabor,
      int diaDesdeColheita, this.nivelAzedo)
      : super(nome, peso, cor, sabor, diaDesdeColheita);

  // Método para verificar se existe refrigerante da fruta cítrica
  void existeRefri(bool existe) {
    if (existe) {
      print('Existe refri de $nome');
    } else {
      print('Não existe refri de $nome');
    }
  }
}

// Classe Nozes que herda de Fruta
class Nozes extends Fruta {
  double porcentagemOleoNatural;

  Nozes(String nome, double peso, String cor, String sabor,
      int diaDesdeColheita, this.porcentagemOleoNatural)
      : super(nome, peso, cor, sabor, diaDesdeColheita);
}

// Interface Bolo com métodos para preparar um bolo
abstract class Bolo {
  void separarIngredientes();
  void FazerMassa();
  void assar();
}
